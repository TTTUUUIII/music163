package org.netease.music.utils

import org.netease.music.MusicEntity
import org.netease.music.conf.FEATURE_FFMPEG_PATH
import java.io.FileOutputStream
import java.nio.file.Path

class Downloader {
    companion object {
        fun downloadLyric(musicEntities: List<MusicEntity>, path: Path): Int {
            var counter = 0
            musicEntities.forEach { music ->
                val artists = music.artists.joinToString(",") {
                    it.artistName
                }
                val output = "${music.name}-${artists}.lrc"
                    .replace("/","")
                music.lyric?.let { lyric ->
                    FileOutputStream(path.resolve(output).toFile()).write(lyric.lyric.encodeToByteArray())
                    counter++
                }
            }
            return counter
        }

        fun generateFfmpegCommand(musicEntities: List<MusicEntity>): String {
            val commands = StringBuilder()
            for (music in musicEntities) {
                if (music.url == null) continue
                val artists = music.artists.joinToString(",") {
                    it.artistName
                }
                val metadata = arrayOf(
                    "-metadata title=\'${music.name}\'",
                    "-metadata artist=\'${artists}\'",
                    "-metadata album=\'${music.album.albumName}\'",
                    "-metadata album_artist=\'${music.album.albumName}\'"
                ).joinToString(" ")
                val output = "${music.name}-${artists}.${music.type}"
                    .replace("/","")
                commands.append("$FEATURE_FFMPEG_PATH -i \'${music.url}\' -i \'${music.album.picUrl}\' $metadata -map 0 -c:a copy -map 1 -c:v mjpeg -id3v2_version 3 \'$output\'$LB")
            }
            return commands.toString()
        }

        fun generateFfmpegScript(musicEntities: List<MusicEntity>, path: Path, sub: String? = null) {
            val win = System.getProperty("os.name").lowercase().contains("windows")
            val scriptPath: Path = if (path.toFile().isDirectory) {
                if (win) {
                    path.resolve("download.bat")
                } else {
                    path.resolve("download.sh")
                }
            } else {
                path
            }
            val script = StringBuilder()
            if (win) {
                script.append("CHCP 65001$LB")
                script.append("@ECHO OFF$LB")
                script.append("@REM This file is automatically generated and relies on ffmpeg$LB")
                script.append("@REM @see: https://ffmpeg.org/$LB")
                script.append("@REM about: https://github.com/TTTUUUIII$LB$LB")

                sub?.let {
                    script.append("if not exist $sub ($LB")
                    script.append("\tmd $sub$LB")
                    script.append(")$LB")
                    script.append("cd $sub$LB")
                }
                script.append(generateFfmpegCommand(musicEntities))
                script.append("$LB${LB}PAUSE$LB")
            } else {
                script.append("#!/bin/sh$LB$LB")
                script.append("#This file is automatically generated and relies on ffmpeg$LB")
                script.append("#see: https://ffmpeg.org/$LB")
                script.append("#about: https://github.com/TTTUUUIII$LB$LB")
                sub?.let {
                    script.append("mkdir -p $sub && cd $sub$LB")
                }
                script.append(generateFfmpegCommand(musicEntities))
                script.append("$LB${LB}exit 0$LB")
                scriptPath.toFile().setExecutable(true, false)
            }
            FileOutputStream(scriptPath.toFile())
                .use {
                    it.write(script.toString().encodeToByteArray())
                }
        }
    }
}